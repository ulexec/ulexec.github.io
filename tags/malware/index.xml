<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malware on ulexec | blog</title>
    <link>http://ulexec.github.io/tags/malware/</link>
    <description>Recent content in malware on ulexec | blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://ulexec.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SHELF Loading</title>
      <link>http://ulexec.github.io/post/2021-04-08-shelfloading/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://ulexec.github.io/post/2021-04-08-shelfloading/</guid>
      <description>SHELF Loading is a new type of ELF binary reflective loading that my colleague @Anonymous_ and I first documented on April 21st 2021. This new ELF reflective loading methodology enables the capability to generate compiler-based artifacts with properties that resemble those of shellcode. These compiler-based artifacts are ultimately a Hybrid ELF file between conventional static and PIE binaries. Had the pleasure to publish this research at Tmp0ut, a Linux VX zine.</description>
    </item>
    
    <item>
      <title>Tales Of Binary Deobfuscation</title>
      <link>http://ulexec.github.io/post/2020-03-03-deobfuscation_1/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ulexec.github.io/post/2020-03-03-deobfuscation_1/</guid>
      <description>This article is going to serve as my personal reference on this topic. Since I&amp;rsquo;ve always wanted to write about it and just finished Yuma Kurogome&amp;rsquo;s course on Advance Binary Deobfuscation, I thought it would be a good time to write notes regarding what I learned in this course with a fresh state of mind on the subject matter for future reference.
Introduction There are close to 31 known code transformations.</description>
    </item>
    
    <item>
      <title>Dissecting the Internals of custom Linux Binary Packers</title>
      <link>http://ulexec.github.io/post/2017-11-17-unpacking_a_linux_tsunami_sample/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ulexec.github.io/post/2017-11-17-unpacking_a_linux_tsunami_sample/</guid>
      <description>Overview In this writeup we&amp;rsquo;re going to unpack a Tsunami malware sample packed with a modified version of UPX. Hashes of this specific sample are the following:
1 2 3 SHA256: f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863 SHA1: 76584c9a22835353186e753903ee0a853663bd83 MD5: 171edd284f6a19c6ed3fe010b79c94af In VirusTotal the malware is identified as a Tsunami Variant for the most part:
If we do some static recon about the file, we can see the following: ```c readelf -lh f22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863 ELF Header: Magic: 7f 45 4c 46 01 01 01 03 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2&#39;s complement, little endian Version: 1 (current) OS/ABI: UNIX - GNU ABI Version: 0 Type: EXEC (Executable file) Machine: Intel 80386 Version: 0x1 Entry point address: 0xc8da20 Start of program headers: 52 (bytes into file) Start of section headers: 0 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 2 Size of section headers: 40 (bytes) Number of section headers: 0 Section header string table index: 0 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x000000 0x00c01000 0x00c01000 0x8d1c2 0x8d1c2 R E 0x1000 LOAD 0x000304 0x0819b304 0x0819b304 0x00000 0x00000 RW 0x1000</description>
    </item>
    
  </channel>
</rss>
