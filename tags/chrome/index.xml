<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chrome on ulexec.github.io</title>
    <link>https://ulexec.github.io/tags/chrome/</link>
    <description>Recent content in chrome on ulexec.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ulexec.github.io/tags/chrome/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SHELF encounters of the elements kind</title>
      <link>https://ulexec.github.io/post/2022-02-22-shelfchrome/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ulexec.github.io/post/2022-02-22-shelfchrome/</guid>
      <description>This is a mirror of my article publsihed at Tmp.0ut zine volume 2. Original post can be found here.
I&amp;rsquo;ve been focusing lately on Chrome exploitation, and after a while I became curious of the idea to attempt to make SHELF loading work for Chrome exploits targeting Linux.
If you are new to the concept of SHELF, it is a reflective loading methodology me and my colleague _Anonymous from Tmp.0ut wrote about last year.</description>
    </item>
    
    <item>
      <title>HTB 2021: Modern Typer </title>
      <link>https://ulexec.github.io/post/2021-04-09-htb_modern_typer/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ulexec.github.io/post/2021-04-09-htb_modern_typer/</guid>
      <description>Overview SPOILER: This blog contains the solution of Modern Typer Chrome exploitation challenge from HTB. If you are planning to take this challenge, I would highly encourage attempting the challenge first before reading this blog. This challenge can be obtained from the Challenges section of hackthebox.
Prerequisites This blog is not a Turbofan reference and is not intended to be. There are excellent public resources to acquire a basic understanding of Turbofan.</description>
    </item>
    
    <item>
      <title>*CTF 2019 - oob-v8</title>
      <link>https://ulexec.github.io/post/2021-05-20-startctf2019_oobv8/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ulexec.github.io/post/2021-05-20-startctf2019_oobv8/</guid>
      <description>This post will cover the chrome exploit challenge oob-v8 from *CTF. The challenge can be found here.
01 -Analyzing the Patch if we take a close look at the patch oob.diff from the *CTF v8-oob challenge we will observe the introduction of the ArrayOob function. Authors of this challenge didn&amp;rsquo;t really wanted to make the discovery of the vulnerability a hard task, and there are even comments for the read/write primitives.</description>
    </item>
    
  </channel>
</rss>
